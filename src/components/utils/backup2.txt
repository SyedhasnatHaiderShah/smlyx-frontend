import React, { useEffect, useState } from "react";
import Backdrop from "@mui/material/Backdrop";
import Modal from "@mui/material/Modal";
import Fade from "@mui/material/Fade";
import Button from "@mui/material/Button";
import { FaTrash } from "react-icons/fa";
import axios from "axios";
import { toast } from "react-toastify";

export default function TransitionsModal() {
  const [formData, setFormData] = useState({
    name: "Default Name",
    recordType: "image",
    typeOfReport: "other",
    date: new Date().toLocaleString(),
    recordNote: "",
    file: null,
  });
  const [open, setOpen] = useState(false);
  const [filePreview, setFilePreview] = useState(null);
  const [isPDF, setIsPDF] = useState(false);

  // Open and close modal
  const handleOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);

  // Handle file selection and create a preview
  const handleFileChange = (e) => {
    const selectedFile = e.target.files[0];
    if (selectedFile) {
      const fileType = selectedFile.type;

      if (fileType === "application/pdf") {
        setIsPDF(true); // Set flag to true for PDFs
        setFilePreview(URL.createObjectURL(selectedFile)); // Create a preview URL for the PDF
      } else if (fileType.startsWith("image/")) {
        setIsPDF(false);
        const reader = new FileReader();
        reader.onload = () => {
          setFilePreview(reader.result); // Set preview for image
        };
        reader.readAsDataURL(selectedFile); // Read the file (for preview purposes)
      }

      // Update form data with the selected file
      setFormData((prevData) => ({
        ...prevData,
        file: selectedFile,
      }));
    }
  };

  // Remove the selected file and clear the preview
  const handleFileRemove = () => {
    setFormData((prevData) => ({
      ...prevData,
      file: null,
    }));
    setFilePreview(null);
    setIsPDF(false); // Reset the PDF flag
    document.getElementById("fileInput").value = ""; // Reset file input value
  };

  // Handle input changes (for text fields and select inputs)
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  // Handle form submission
  const onSubmit = async (e) => {
    e.preventDefault(); // Prevent default form submission

    console.log("Form Data: ", formData); // Log the form data for debugging
    console.log(formData);
    try {
      if (formData.file.type === "application/pdf") {
        const uploadResponse = await axios.post(
          "http://localhost:3000/upload/file", // The upload endpoint for both image and PDF
          formData.file[0],
          {
            headers: {
              "Content-Type": "multipart/form-data",
            },
          }
        );
        const fileUrl = uploadResponse.data.data.secure_url; // Get the file URL from the response
        toast.info(`File uploaded successfully: ${fileUrl}`);
        console.log("its a pdf file");
      } else {
        console.log("its an image file");
        const uploadResponse = await axios.post(
          "http://localhost:3000/upload/file",
          formData.file[0],
          formData.recordNote,
          {
            headers: {
              "Content-Type": "multipart/form-data",
            },
          }
        );

        const imageUrl = uploadResponse.data.secure_url; // The URL of the uploaded image
        toast.info("Image uploaded successfully", imageUrl);
        console.log("its an image file");
      }
      // Upload to the backend (adjust your backend URL if needed)

      // Further action can be taken after the file is uploaded
    } catch (error) {
      console.error("Error uploading file: ", error);
      toast.error(
        "Error uploading file",
        error.response?.data || error.message
      );
    }
  };

  return (
    <div>
      <Button onClick={handleOpen}>
        <button className="bg-primarybg text-white px-5 rounded-full py-2">
          + Add Upload
        </button>
      </Button>
      <Modal
        aria-labelledby="transition-modal-title"
        aria-describedby="transition-modal-description"
        open={open}
        onClose={handleClose}
        closeAfterTransition
        BackdropComponent={Backdrop}
        BackdropProps={{
          timeout: 500,
        }}
      >
        <Fade in={open}>
          <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-4/5 md:w-1/2 max-w-xl bg-white p-4 rounded-lg shadow-lg">
            <form onSubmit={onSubmit} className="flex flex-col gap-4">
              {/* File Upload Section */}
              <div className="flex items-start justify-start w-full">
                <div
                  className="border-2 border-dashed border-[#3fbbeb] p-4 text-center cursor-pointer w-1/2 h-32 mb-5 rounded-lg"
                  onClick={() => document.getElementById("fileInput").click()}
                >
                  {/* Conditional rendering for image or PDF */}
                  {filePreview ? (
                    isPDF ? (
                      <iframe
                        src={filePreview}
                        title="PDF Preview"
                        className="w-full h-full"
                      />
                    ) : (
                      <img
                        src={filePreview}
                        alt="Uploaded"
                        className="w-full h-full object-cover"
                      />
                    )
                  ) : (
                    "Click to Upload File"
                  )}
                </div>
                <div className="flex items-center justify-center w-1/2 h-full bg-lime-200">
                  {filePreview && (
                    <div className="relative">
                      {isPDF ? (
                        <div className="text-sm">PDF Preview Available</div>
                      ) : (
                        <img
                          src={filePreview}
                          alt="Uploaded"
                          className="h-24 w-24 object-cover"
                        />
                      )}
                      <button
                        type="button"
                        className="absolute top-0 right-0 bg-red-500 text-white rounded-full p-1"
                        onClick={handleFileRemove}
                      >
                        <FaTrash />
                      </button>
                    </div>
                  )}
                </div>
              </div>

              {/* File Input */}
              <input
                type="file"
                id="fileInput"
                className="hidden"
                accept="image/*,application/pdf"
                onChange={handleFileChange}
              />

              {/* Name Input */}
              <div className="flex flex-col gap-2 w-full">
                <label htmlFor="name" className="font-semibold">
                  Name <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  className="w-full px-4 py-2 border border-gray-300 rounded-md"
                  required
                />
              </div>

              {/* Record Type Select */}
              <div className="flex flex-col gap-2 w-full">
                <label htmlFor="recordType" className="font-semibold">
                  Record Type <span className="text-red-500">*</span>
                </label>
                <select
                  name="recordType"
                  value={formData.recordType}
                  onChange={handleInputChange}
                  className="w-full px-4 py-2 border border-gray-300 rounded-md"
                  required
                >
                  <option value="image">Images</option>
                  <option value="document">Documents</option>
                </select>
              </div>

              {/* Type of Report Radio Buttons */}
              <div className="flex flex-col gap-2">
                <label className="font-semibold">Type of Report</label>
                <div className="flex gap-4">
                  <label className="flex items-center font-semibold">
                    <input
                      type="radio"
                      name="typeOfReport"
                      value="chart"
                      checked={formData.typeOfReport === "chart"}
                      onChange={handleInputChange}
                    />
                    Chart
                  </label>
                  <label className="flex items-center font-semibold">
                    <input
                      type="radio"
                      name="typeOfReport"
                      value="other"
                      checked={formData.typeOfReport === "other"}
                      onChange={handleInputChange}
                    />
                    Other
                  </label>
                </div>
              </div>

              {/* Date (Read-Only) */}
              <div className="flex flex-col gap-2">
                <label htmlFor="date" className="font-semibold">
                  Date
                </label>
                <input
                  type="text"
                  name="date"
                  value={formData.date}
                  readOnly
                  className="w-full px-4 py-2 border border-gray-300 rounded-md"
                />
              </div>

              {/* Record Note */}
              <div className="flex flex-col gap-2">
                <label htmlFor="recordNote" className="font-semibold">
                  Record Note
                </label>
                <textarea
                  name="recordNote"
                  value={formData.recordNote}
                  onChange={handleInputChange}
                  className="w-full px-4 py-2 border border-gray-300 rounded-md resize-none"
                  rows="4"
                />
              </div>

              {/* Submit Button */}
              <button
                type="submit"
                className="bg-primarybg text-white px-5 py-2 rounded-full self-center"
                onClick={() =>
                  formData.file === "" && toast.dark("Please select a file")
                }
                disabled={formData.file === ""}
              >
                Submit
              </button>
            </form>
          </div>
        </Fade>
      </Modal>
    </div>
  );
}
